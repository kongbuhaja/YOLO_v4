nohup: ignoring input
GPUs [PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU'), PhysicalDevice(name='/physical_device:GPU:1', device_type='GPU'), PhysicalDevice(name='/physical_device:GPU:2', device_type='GPU'), PhysicalDevice(name='/physical_device:GPU:3', device_type='GPU')]
make new model
Model: YOLOv4
Dataset: voc train
./data/voc/train.tfrecord is exist
Dataset: voc val
./data/voc/val.tfrecord is exist
train epoch 1/400:   0%|[31m          [0m| 0/189 [00:00<?, ?it/s]train epoch 1/400:   0%|[31m          [0m| 0/189 [00:54<?, ?it/s]
Traceback (most recent call last):
  File "/home/YOLO_v4/multi_gpu_train.py", line 158, in <module>
    main()
  File "/home/YOLO_v4/multi_gpu_train.py", line 80, in main
    train_loss = distributed_train_step(batch_images, batch_grids)
  File "/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/traceback_utils.py", line 153, in error_handler
    raise e.with_traceback(filtered_tb) from None
  File "/usr/local/lib/python3.10/dist-packages/tensorflow/python/framework/func_graph.py", line 1147, in autograph_handler
    raise e.ag_error_metadata.to_exception(e)
tensorflow.python.framework.errors_impl.ResourceExhaustedError: in user code:

    File "/home/YOLO_v4/multi_gpu_train.py", line 57, in distributed_train_step  *
        per_replica_losses = strategy.run(train_step, args=(batch_images, batch_grids))
    File "/home/YOLO_v4/multi_gpu_train.py", line 39, in train_step  *
        preds = model(batch_images, True)
    File "/usr/local/lib/python3.10/dist-packages/keras/utils/traceback_utils.py", line 67, in error_handler  **
        raise e.with_traceback(filtered_tb) from None

    ResourceExhaustedError: Exception encountered when calling layer "yolo" (type YOLO).
    
    in user code:
    
        File "/home/YOLO_v4/models/yolov4.py", line 56, in call  *
            large_branch = self.medium_downsample_layer(medium_branch, large_branch, training)
        File "/usr/local/lib/python3.10/dist-packages/keras/utils/traceback_utils.py", line 67, in error_handler  **
            raise e.with_traceback(filtered_tb) from None
    
        ResourceExhaustedError: Exception encountered when calling layer "downsample_concat_1" (type DownsampleConcat).
        
        in user code:
        
            File "/home/YOLO_v4/models/common.py", line 223, in call  *
                x = self.concat_conv(branch1, branch2, training)
            File "/usr/local/lib/python3.10/dist-packages/keras/utils/traceback_utils.py", line 67, in error_handler  **
                raise e.with_traceback(filtered_tb) from None
        
            ResourceExhaustedError: Exception encountered when calling layer "concat_conv_3" (type ConcatConv).
            
            in user code:
            
                File "/home/YOLO_v4/models/common.py", line 185, in call  *
                    x = self.conv4(x, training)
                File "/usr/local/lib/python3.10/dist-packages/keras/utils/traceback_utils.py", line 67, in error_handler  **
                    raise e.with_traceback(filtered_tb) from None
            
                ResourceExhaustedError: Exception encountered when calling layer "darknet_conv_106" (type DarknetConv).
                
                in user code:
                
                    File "/home/YOLO_v4/models/common.py", line 44, in call  *
                        x = self.conv(input)
                    File "/usr/local/lib/python3.10/dist-packages/keras/utils/traceback_utils.py", line 67, in error_handler  **
                        raise e.with_traceback(filtered_tb) from None
                    File "/usr/local/lib/python3.10/dist-packages/keras/backend.py", line 1920, in random_uniform
                        return tf.random.uniform(
                
                    ResourceExhaustedError: failed to allocate memory [Op:AddV2]
                
                
                Call arguments received:
                  â€¢ input=tf.Tensor(shape=(16, 13, 13, 512), dtype=float32)
                  â€¢ training=True
            
            
            Call arguments received:
              â€¢ branch1=tf.Tensor(shape=(16, 13, 13, 512), dtype=float32)
              â€¢ branch2=tf.Tensor(shape=(16, 13, 13, 512), dtype=float32)
              â€¢ training=True
        
        
        Call arguments received:
          â€¢ branch1=tf.Tensor(shape=(16, 26, 26, 256), dtype=float32)
          â€¢ branch2=tf.Tensor(shape=(16, 13, 13, 512), dtype=float32)
          â€¢ training=True
    
    
    Call arguments received:
      â€¢ input=tf.Tensor(shape=(16, 416, 416, 3), dtype=float32)
      â€¢ training=True

